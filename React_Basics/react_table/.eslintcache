[{"/home/christu/NodeJs/React_Basics/react_table/src/index.js":"1","/home/christu/NodeJs/React_Basics/react_table/src/App.js":"2","/home/christu/NodeJs/React_Basics/react_table/src/reportWebVitals.js":"3","/home/christu/NodeJs/React_Basics/react_table/src/components/BasicTable.js":"4","/home/christu/NodeJs/React_Basics/react_table/src/components/Colums.js":"5","/home/christu/NodeJs/React_Basics/react_table/src/components/SortingTable.js":"6","/home/christu/NodeJs/React_Basics/react_table/src/components/FilteringTable.js":"7","/home/christu/NodeJs/React_Basics/react_table/src/components/GlobalFilter.js":"8","/home/christu/NodeJs/React_Basics/react_table/src/components/ColumnFilter.js":"9","/home/christu/NodeJs/React_Basics/react_table/src/components/PaginationTable.js":"10","/home/christu/NodeJs/React_Basics/react_table/src/components/RowSelection.js":"11","/home/christu/NodeJs/React_Basics/react_table/src/components/Checkbox.js":"12","/home/christu/NodeJs/React_Basics/react_table/src/components/ColumnOrder.js":"13","/home/christu/NodeJs/React_Basics/react_table/src/components/ColumnHiding.js":"14","/home/christu/NodeJs/React_Basics/react_table/src/components/SttickyTable.js":"15","/home/christu/NodeJs/React_Basics/react_table/src/components/TableStyles.js":"16"},{"size":500,"mtime":1615182272245,"results":"17","hashOfConfig":"18"},{"size":1319,"mtime":1616659453192,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1615182272245,"results":"20","hashOfConfig":"18"},{"size":2548,"mtime":1616601539400,"results":"21","hashOfConfig":"18"},{"size":2048,"mtime":1616658842752,"results":"22","hashOfConfig":"18"},{"size":2765,"mtime":1616602802341,"results":"23","hashOfConfig":"18"},{"size":3380,"mtime":1616605578648,"results":"24","hashOfConfig":"18"},{"size":868,"mtime":1616606467728,"results":"25","hashOfConfig":"18"},{"size":332,"mtime":1616604777283,"results":"26","hashOfConfig":"18"},{"size":4529,"mtime":1616653364521,"results":"27","hashOfConfig":"18"},{"size":3827,"mtime":1616655603395,"results":"28","hashOfConfig":"18"},{"size":415,"mtime":1616654423311,"results":"29","hashOfConfig":"18"},{"size":2995,"mtime":1616656390271,"results":"30","hashOfConfig":"18"},{"size":3319,"mtime":1616657412447,"results":"31","hashOfConfig":"18"},{"size":2106,"mtime":1616658968856,"results":"32","hashOfConfig":"18"},{"size":1072,"mtime":1616658027355,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"19s4hi0",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/christu/NodeJs/React_Basics/react_table/src/index.js",[],["71","72"],"/home/christu/NodeJs/React_Basics/react_table/src/App.js",[],"/home/christu/NodeJs/React_Basics/react_table/src/reportWebVitals.js",[],"/home/christu/NodeJs/React_Basics/react_table/src/components/BasicTable.js",["73"],"import React, { useMemo } from 'react'\nimport { useTable } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './Colums'\nimport './table.css'\n\nexport const BasicTable = () => {\n\n    // ensuring that data is not re-created for every render: for this usage UseMemo helpful\n    // const columns = useMemo(() => COLUMNS,[])\n    const columns = useMemo(() => GROUPED_COLUMNS,[])\n    const data = useMemo(() => MOCK_DATA,[])\n\n    const tableInstance = useTable({\n        columns: columns,\n        data: data\n    })\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups, \n        footerGroups,\n        rows,\n        prepareRow\n    } = tableInstance\n\n    return (\n        <table {...getTableProps}>\n            <thead >\n                {\n                    headerGroups.map( (headerGroup) => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n\n                            {\n                                headerGroup.headers.map((column) => (\n                                    <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                                ))\n                            }\n\n                        </tr>\n                    ))\n                }\n            </thead>\n            <tbody {...getTableBodyProps}>\n                {\n                    rows.map((row) => {\n                        prepareRow(row)\n                        return(\n                            <tr {...row.getRowProps()}> \n\n                               {row.cells.map((cell) => {\n                                   return <td {... cell.getCellProps()}>{cell.render('Cell')}</td>\n                               })}\n\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            <tfoot>\n                {\n                    footerGroups.map(footerGroup => (\n                        <tr {...footerGroup.getFooterGroupProps()}>\n                            {\n                                footerGroup.headers.map(column => (\n                                    <td {...column.getFooterProps()}>\n                                        {\n                                            column.render('Footer')\n                                        }\n                                    </td>\n                                ))\n                            }\n\n                        </tr>\n                    ))\n                }\n            </tfoot>\n        </table>\n    )\n}\n\n\n","/home/christu/NodeJs/React_Basics/react_table/src/components/Colums.js",["74"],"/home/christu/NodeJs/React_Basics/react_table/src/components/SortingTable.js",[],"/home/christu/NodeJs/React_Basics/react_table/src/components/FilteringTable.js",["75"],"import React, { useMemo } from 'react'\nimport { useTable , useGlobalFilter, useFilters } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './Colums'\nimport './table.css'\nimport { GlobalFilter } from './GlobalFilter'\nimport { ColumnFilter } from './ColumnFilter'\n\nexport const FilteringTable = () => {\n\n    // ensuring that data is not re-created for every render: for this usage UseMemo helpful\n    const columns = useMemo(() => COLUMNS,[])\n    const data = useMemo(() => MOCK_DATA,[])\n\n    // To pass common functionality on all of the column ex; column filtering \n    const defaultColumn = useMemo(() =>{\n        return {\n            Filter: ColumnFilter\n        }\n    },[])\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups, \n        footerGroups,\n        rows,\n        prepareRow,\n        state,\n        setGlobalFilter\n    } = useTable({\n        columns: columns,\n        data: data,\n        defaultColumn: defaultColumn\n    },useFilters, useGlobalFilter)\n\n    const { globalFilter } = state\n\n    return (\n        <>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter } />\n            <table {...getTableProps}>\n                <thead >\n                    {\n                        headerGroups.map( (headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th {...column.getHeaderProps()}>\n                                            {column.render('Header')}\n                                            <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                        </th>\n                                    ))\n                                }\n\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody {...getTableBodyProps}>\n                    {\n                        rows.map((row) => {\n                            prepareRow(row)\n                            return(\n                                <tr {...row.getRowProps()}> \n\n                                {row.cells.map((cell) => {\n                                    return <td {... cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n                <tfoot>\n                    {\n                        footerGroups.map(footerGroup => (\n                            <tr {...footerGroup.getFooterGroupProps()}>\n                                {\n                                    footerGroup.headers.map(column => (\n                                        <td {...column.getFooterProps()}>\n                                            {\n                                                column.render('Footer')\n                                            }\n                                        </td>\n                                    ))\n                                }\n\n                            </tr>\n                        ))\n                    }\n                </tfoot>\n            </table>\n        </>\n    )\n}\n\n\n","/home/christu/NodeJs/React_Basics/react_table/src/components/GlobalFilter.js",[],"/home/christu/NodeJs/React_Basics/react_table/src/components/ColumnFilter.js",[],"/home/christu/NodeJs/React_Basics/react_table/src/components/PaginationTable.js",["76"],"/home/christu/NodeJs/React_Basics/react_table/src/components/RowSelection.js",["77"],"/home/christu/NodeJs/React_Basics/react_table/src/components/Checkbox.js",[],"/home/christu/NodeJs/React_Basics/react_table/src/components/ColumnOrder.js",["78"],"/home/christu/NodeJs/React_Basics/react_table/src/components/ColumnHiding.js",["79"],"import React, { useMemo } from 'react'\nimport { useTable} from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './Colums'\nimport './table.css'\nimport { Checkbox } from './Checkbox'\n\nexport const ColumnHiding = () => {\n\n    // ensuring that data is not re-created for every render: for this usage UseMemo helpful\n    const columns = useMemo(() => COLUMNS,[])\n    const data = useMemo(() => MOCK_DATA,[])\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups, \n        footerGroups,\n        rows,\n        prepareRow,\n        allColumns,\n        getToggleHideAllColumnsProps\n    } = useTable(\n        {\n            columns: columns,\n            data: data\n        })\n\n    return (\n        <>\n            <div>\n                <div>\n                    <Checkbox {...getToggleHideAllColumnsProps()}/> Toggle All\n                </div>\n                {\n                    allColumns.map(column => (\n                       <div key={column.id}>\n                           <label>\n                               <input type='checkbox' {...column.getToggleHiddenProps()} />\n                               {column.Header}\n                           </label>\n                       </div> \n                    ))\n                }\n            </div>\n            <table {...getTableProps}>\n                <thead >\n                    {\n                        headerGroups.map( (headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                                    ))\n                                }\n\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody {...getTableBodyProps}>\n                    {\n                        rows.map((row) => {\n                            prepareRow(row)\n                            return(\n                                <tr {...row.getRowProps()}> \n\n                                {row.cells.map((cell) => {\n                                    return <td {... cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n                <tfoot>\n                    {\n                        footerGroups.map(footerGroup => (\n                            <tr {...footerGroup.getFooterGroupProps()}>\n                                {\n                                    footerGroup.headers.map(column => (\n                                        <td {...column.getFooterProps()}>\n                                            {\n                                                column.render('Footer')\n                                            }\n                                        </td>\n                                    ))\n                                }\n\n                            </tr>\n                        ))\n                    }\n                </tfoot>\n            </table>\n        </>\n    )\n}\n\n\n","/home/christu/NodeJs/React_Basics/react_table/src/components/SttickyTable.js",["80","81","82"],"import React, { useMemo } from 'react'\nimport { useTable, useBlockLayout} from 'react-table'\nimport { useSticky } from 'react-table-sticky'\nimport { Styles } from './TableStyles'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './Colums'\nimport './table.css'\nimport { Checkbox } from './Checkbox'\n\nexport const StickyTable = () => {\n\n    // ensuring that data is not re-created for every render: for this usage UseMemo helpful\n    const columns = useMemo(() => COLUMNS,[])\n    const data = useMemo(() => MOCK_DATA,[])\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups, \n        footerGroups,\n        rows,\n        prepareRow\n    } = useTable(\n        {\n            columns: columns,\n            data: data\n        },\n        useBlockLayout,\n        useSticky\n        )\n\n    const firstPageRows = rows.slice(0,20)\n    return (\n        <Styles>\n            <div {...getTableProps()} className=\"table sticky\" style={{ width: 1000, height: 500 }}>\n                <div className=\"header\">\n                {headerGroups.map((headerGroup) => (\n                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\n                    {headerGroup.headers.map((column) => (\n                        <div {...column.getHeaderProps()} className=\"th\">\n                        {column.render('Header')}\n                        </div>\n                    ))}\n                    </div>\n                ))}\n                </div>\n                <div {...getTableBodyProps()} className=\"body\">\n                {firstPageRows.map((row) => {\n                    prepareRow(row);\n                    return (\n                    <div {...row.getRowProps()} className=\"tr\">\n                        {row.cells.map((cell) => (\n                        <div {...cell.getCellProps()} className=\"td\">\n                            {cell.render('Cell')}\n                        </div>\n                        ))}\n                    </div>\n                    );\n                })}\n                </div>\n            </div>\n        </Styles>\n\n    )\n}\n\n\n","/home/christu/NodeJs/React_Basics/react_table/src/components/TableStyles.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":17},{"ruleId":"87","severity":1,"message":"91","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":22},{"ruleId":"87","severity":1,"message":"92","line":4,"column":19,"nodeType":"89","messageId":"90","endLine":4,"endColumn":34},{"ruleId":"87","severity":1,"message":"92","line":4,"column":19,"nodeType":"89","messageId":"90","endLine":4,"endColumn":34},{"ruleId":"87","severity":1,"message":"92","line":4,"column":19,"nodeType":"89","messageId":"90","endLine":4,"endColumn":34},{"ruleId":"87","severity":1,"message":"92","line":4,"column":19,"nodeType":"89","messageId":"90","endLine":4,"endColumn":34},{"ruleId":"87","severity":1,"message":"92","line":4,"column":19,"nodeType":"89","messageId":"90","endLine":4,"endColumn":34},{"ruleId":"87","severity":1,"message":"92","line":6,"column":19,"nodeType":"89","messageId":"90","endLine":6,"endColumn":34},{"ruleId":"87","severity":1,"message":"93","line":8,"column":10,"nodeType":"89","messageId":"90","endLine":8,"endColumn":18},{"ruleId":"87","severity":1,"message":"94","line":20,"column":9,"nodeType":"89","messageId":"90","endLine":20,"endColumn":21},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'COLUMNS' is defined but never used.","Identifier","unusedVar","'ColumnFilter' is defined but never used.","'GROUPED_COLUMNS' is defined but never used.","'Checkbox' is defined but never used.","'footerGroups' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]